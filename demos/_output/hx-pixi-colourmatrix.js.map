{
"version":3,
"file":"hx-pixi-colourmatrix.js",
"sourceRoot":"file://",
"sources":["/haxe/haxe-pixi/demos/colourmatrix/Main.hx","/usr/lib/haxe/std/Math.hx"],
"sourcesContent":["package demos.colourmatrix;\n\nimport pixi.text.Text;\nimport pixi.InteractionData;\nimport pixi.display.DisplayObjectContainer;\nimport pixi.filters.ColorMatrixFilter;\nimport js.Browser;\nimport pixi.renderers.webgl.WebGLRenderer;\nimport pixi.display.Sprite;\nimport pixi.display.Stage;\nimport pixi.utils.Detector;\nimport js.Browser;\n\nclass Main {\n\n\tvar _bg:Sprite;\n\tvar _colorMatrix:Array<Float>;\n\tvar _container:DisplayObjectContainer;\n\tvar _filter:ColorMatrixFilter;\n\n\tvar _bgFront:Sprite;\n\tvar _light1:Sprite;\n\tvar _light2:Sprite;\n\tvar _panda:Sprite;\n\n\tvar _count:Float;\n\tvar _switchy:Bool;\n\tvar _renderer:WebGLRenderer;\n\tvar _stage:Stage;\n\n\tpublic function new() {\n\t\t_stage = new Stage(0x003366);\n\t\t_stage.interactive = true;\n\n\t\t_renderer = Detector.autoDetectRenderer(Browser.window.innerWidth, Browser.window.innerHeight);\n\t\tBrowser.document.body.appendChild(_renderer.view);\n\n\t\t_bg = Sprite.fromImage(\"assets/filters/BGrotate.jpg\");\n\t\t_bg.anchor.set(0.5, 0.5);\n\t\t_bg.x = Browser.window.innerWidth / 2;\n\t\t_bg.y = Browser.window.innerHeight / 2;\n\n\t\t_colorMatrix =  [1,0,0,0,\n\t\t\t\t\t\t0,1,0,0,\n\t\t\t\t\t\t0,0,1,0,\n\t\t\t\t\t\t0,0,0,1];\n\n\n\t\t_filter = new ColorMatrixFilter();\n\n\t\t_container = new DisplayObjectContainer();\n\t\t_container.x = Browser.window.innerWidth / 2;\n\t\t_container.y = Browser.window.innerHeight / 2;\n\n\t\t_bgFront = Sprite.fromImage(\"assets/filters/SceneRotate.jpg\");\n\t\t_bgFront.anchor.set(0.5, 0.5);\n\n\t\t_container.addChild(_bgFront);\n\n\t\t_light2 = Sprite.fromImage(\"assets/filters/LightRotate2.png\");\n\t\t_light2.anchor.set(0.5, 0.5);\n\t\t_container.addChild(_light2);\n\n\t\t_light1 = Sprite.fromImage(\"assets/filters/LightRotate1.png\");\n\t\t_light1.anchor.set(0.5, 0.5);\n\t\t_container.addChild(_light1);\n\n\t\t_panda =  Sprite.fromImage(\"assets/filters/panda.png\");\n\t\t_panda.anchor.set(0.5, 0.5);\n\n\t\t_container.addChild(_panda);\n\t\t_stage.addChild(_container);\n\n\t\t_count = 0;\n\t\t_switchy = false;\n\t\t_stage.filters = [_filter];\n\n\t\t_stage.click = _stage.tap = _onClick;\n\n\t\tvar style:TextStyle = {font: \"bold 12pt Arial\", fill: \"#FFFFFF\"};\n\t\tvar help = new Text(\"Click to turn filters on / off.\", style);\n\t\t_stage.addChild(help);\n\n\t\tBrowser.window.requestAnimationFrame(cast animate);\n\t}\n\n\tfunction _onClick(data:InteractionData) {\n\t\t_switchy = !_switchy;\n\t\tif (!_switchy) _stage.filters = [_filter];\n\t\telse _stage.filters = null;\n\t}\n\n\tfunction animate() {\n\t\tBrowser.window.requestAnimationFrame(cast animate);\n\t\t_count += 0.01;\n\n\t\t_bg.rotation += 0.01;\n\t\t_bgFront.rotation -= 0.01;\n\n\t\t_light1.rotation += 0.02;\n\t\t_light2.rotation += 0.01;\n\n\t\t_panda.scale.x = 1 + Math.sin(_count) * 0.04;\n\t\t_panda.scale.y = 1 + Math.cos(_count) * 0.04;\n\n\t\t_count += 0.1;\n\n\t\t_colorMatrix[1] = Math.sin(_count) * 3;\n\t\t_colorMatrix[2] = Math.cos(_count);\n\t\t_colorMatrix[3] = Math.cos(_count) * 1.5;\n\t\t_colorMatrix[4] = Math.sin(_count / 3) * 2;\n\t\t_colorMatrix[5] = Math.sin(_count / 2);\n\t\t_colorMatrix[6] = Math.sin(_count / 4);\n\t\t_filter.matrix = _colorMatrix;\n\t\t_renderer.render(_stage);\n\t}\n\n\tstatic function main() {\n\t\tnew Main();\n\t}\n}","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tThis class defines mathematical functions and constants.\n**/\n#if cpp @:include(\"hxMath\") #end\nextern class Math\n{\n\t/**\n\t\tRepresents the ratio of the circumference of a circle to its diameter, \n\t\tspecified by the constant, Ï€. `PI` is approximately 3.141592653589793.\n\t**/\n\tstatic var PI(default,null) : Float;\n\n\t/**\n\t\tA special Float constant which denotes negative infinity.\n\n\t\tFor example, this is the result of -1.0 / 0.0.\n\n\t\tOperations with NEGATIVE_INFINITY as an operand may result in\n\t\tNEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. \n\n\t\tIf this constant is converted to an Int, e.g. through Std.int(), the\n\t\tresult is unspecified.\n\t**/\n\tstatic var NEGATIVE_INFINITY(default, null) : Float;\n\n\t/**\n\t\tA special Float constant which denotes negative infinity.\n\n\t\tFor example, this is the result of 1.0 / 0.0.\n\n\t\tOperations with POSITIVE_INFINITY as an operand may result in\n\t\tNEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. \n\n\t\tIf this constant is converted to an Int, e.g. through Std.int(), the\n\t\tresult is unspecified.\n\t**/\n\tstatic var POSITIVE_INFINITY(default,null) : Float;\n\n\t/**\n\t\tA special Float constant which denotes an invalid number.\n\n\t\tNaN stands for \"Not a Number\". It occurs when a mathematically incorrect\n\t\toperation is executed, such as taking the square root of a negative\n\t\tnumber: Math.sqrt(-1).\n\n\t\tAll further operations with NaN as an operand will result in NaN.\n\n\t\tIf this constant is converted to an Int, e.g. through Std.int(), the\n\t\tresult is unspecified.\n\n\t\tIn order to test if a value is NaN, you should use Math.isNaN() function.\n\n\t\t@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected\n\t\tresults when performing arithmetic operations with NaN on Windows, \n\t\tsee [https://bugs.php.net/bug.php?id=42143]\n\t**/\n\tstatic var NaN(default, null) : Float;\n\n\t/**\n\t\tReturns the absolute value of `v`.\n\n\t\tIf `v` is positive or 0, the result is unchanged. Otherwise the result \n\t\tis -`v`.\n\t\t\n\t\tIf `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is \n\t\tPOSITIVE_INFINITY.\n\t\t\n\t\tIf `v` is NaN, the result is NaN.\n\t**/\n\tstatic function abs(v:Float):Float;\n\n\t/**\n\t\tReturns the smaller of values `a` and `b`.\n\n\t\tIf `a` or `b` are NaN, the result is NaN.\n\t\tIf `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.\n\t\tIf `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t**/\n\tstatic function min(a:Float, b:Float):Float;\n\n\t/**\n\t\tReturns the greater of values `a` and `b`.\n\n\t\tIf `a` or `b` are NaN, the result is NaN.\n\t\tIf `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.\n\t**/\n\tstatic function max(a:Float, b:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric sine of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function sin(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric cosine of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function cos(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric tangent of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function tan(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function asin(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc cosine of the specified angle `v`, \n\t\tin radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function acos(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc tangent of the specified angle `v`, \n\t\tin radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function atan(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc tangent whose tangent is the quotient of \n\t\ttwo specified numbers, in radians.\n\t\t\n\t\tIf parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is NaN.\n\t**/\n\tstatic function atan2(y:Float, x:Float):Float;\n\n\t/**\n\t\tReturns Euler's number, raised to the power of `v`.\n\t\t\n\t\texp(1.0) is approximately 2.718281828459.\n\t\t\n\t\tIf `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `v` is NEGATIVE_INFINITY, the result is 0.0.\n\t\tIf `v` is NaN, the result is NaN.\n\t**/\n\tstatic function exp(v:Float):Float;\n\n\t/**\n\t\tReturns the natural logarithm of `v`.\n\t\t\n\t\tThis is the mathematical inverse operation of exp, \n\t\ti.e. `log(exp(v)) == v` always holds.\n\t\t\n\t\tIf `v` is negative (including NEGATIVE_INFINITY) or NaN, the result \n\t\tis NaN.\n\t\tIf `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `v` is 0.0, the result is NEGATIVE_INFINITY.\n\t**/\n\tstatic function log(v:Float):Float;\n\n\t/**\n\t\tReturns a specified base `v` raised to the specified power `exp`.\n\t**/\n\tstatic function pow(v:Float, exp:Float):Float;\n\n\t/**\n\t\tReturns the square root of `v`.\n\t\t\n\t\tIf `v` is negative (including NEGATIVE_INFINITY) or NaN, the result \n\t\tis NaN.\n\t\tIf `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `v` is 0.0, the result is 0.0.\n\t**/\n\tstatic function sqrt(v:Float):Float;\n\n\t/**\n\t\tRounds `v` to the nearest integer value.\n\t\t\n\t\tIf `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY \n\t\tor POSITIVE_INFINITY, the result is unspecified.\n\t**/\n\tstatic function round(v:Float):Int;\n\n\t/**\n\t\tReturns the largest integer value that is not greater than `v`.\n\n\t\tIf `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY \n\t\tor POSITIVE_INFINITY, the result is unspecified.\n\t**/\n\tstatic function floor(v:Float):Int;\n\n\t/**\n\t\tReturns the smallest integer value that is not less than `v`.\n\n\t\tIf `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY \n\t\tor POSITIVE_INFINITY, the result is unspecified.\n\t**/\n\tstatic function ceil(v:Float):Int;\n\n\t/**\n\t\tReturns a pseudo-random number which is greater than or equal to 0.0, \n\t\tand less than 1.0.\n\t**/\n\tstatic function random() : Float;\n\n\t#if ((flash9 && !as3) || cpp)\n\t/**\n\t\tReturns the largest integer value that is not greater than `v`, as a Float.\n\n\t\tIf `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is unspecified.\n\t**/\n\tstatic function ffloor( v : Float ) : Float;\n\n\t/**\n\t\tReturns the smallest integer value that is not less than `v`, as a Float.\n\n\t\tIf `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is unspecified.\n\t**/\n\tstatic function fceil( v : Float ) : Float;\n\n\t/**\n\t\tRounds `v` to the nearest integer value, as a Float.\n\n\t\tIf `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is unspecified.\n\t**/\n\tstatic function fround( v : Float ) : Float;\n\n\t#else\n\n\tstatic inline function ffloor( v : Float ) : Float {\n\t\treturn floor(v);\n\t}\n\n\tstatic inline function fceil( v : Float ) : Float {\n\t\treturn ceil(v);\n\t}\n\n\tstatic inline function fround( v : Float ) : Float {\n\t\treturn round(v);\n\t}\n\n\t#end\n\n\n\t/**\n\t\tTells if `f` is a finite number.\n\n\t\tIf `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result \n\t\tis false, otherwise the result is true.\n\t**/\n\tstatic function isFinite( f : Float ) : Bool;\n\n\t/**\n\t\tTells if `f` is not a valid number.\n\n\t\tIf `f` is NaN, the result is true, otherwise the result is false. \n\t\tIn particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are\n\t\tnot considered NaN.\n\t**/\n\tstatic function isNaN( f : Float ) : Bool;\n\n\tprivate static function __init__() : Void untyped {\n\t#if flash9\n\t\tNaN = __global__[\"Number\"].NaN;\n\t\tNEGATIVE_INFINITY = __global__[\"Number\"].NEGATIVE_INFINITY;\n\t\tPOSITIVE_INFINITY = __global__[\"Number\"].POSITIVE_INFINITY;\n\t#else\n\t\t#if !js // genjs.ml will insert this only if necessary.\n\t\t\tMath.__name__ = [\"Math\"];\n\t\t#end\n\t\tMath.NaN = Number[\"NaN\"];\n\t\tMath.NEGATIVE_INFINITY = Number[\"NEGATIVE_INFINITY\"];\n\t\tMath.POSITIVE_INFINITY = Number[\"POSITIVE_INFINITY\"];\n\t#end\n\t#if js\n\t\t__feature__(\"Type.resolveClass\",$hxClasses['Math'] = Math);\n\t#end\n\t\tMath.isFinite = function(i) {\n\t\t\treturn\n\t\t\t#if flash9\n\t\t\t__global__[\"isFinite\"](i);\n\t\t\t#elseif flash\n\t\t\t_global[\"isFinite\"](i);\n\t\t\t#elseif js\n\t\t\t__js__(\"isFinite\")(i);\n\t\t\t#else\n\t\t\tfalse;\n\t\t\t#end\n\t\t};\n\t\tMath.isNaN = function(i) {\n\t\t\treturn\n\t\t\t#if flash9\n\t\t\t__global__[\"isNaN\"](i);\n\t\t\t#elseif flash\n\t\t\t_global[\"isNaN\"](i);\n\t\t\t#elseif js\n\t\t\t__js__(\"isNaN\")(i);\n\t\t\t#else\n\t\t\tfalse;\n\t\t\t#end\n\t\t};\n\t}\n\n}\n\n\n"],
"names":[],
"mappings":";;;0BA8BO,fAAe;CACrB,EAAS,YAAU;CACnB,EAAqB;CAErB,EAAY,FAA4B,AAA2B;CACnE,AAAkC;CAElC,EAAM,FAAiB;CACvB,AAAe,AAAK;CACpB,EAAQ,AAA4B;CACpC,EAAQ,AAA6B;CAErC,EAAgB,FAAC,AAAE,AAAE,AAAE,AACnB,AAAE,AAAE,AAAE,AACN,AAAE,AAAE,AAAE,AACN,AAAE,AAAE,AAAE;CAGV,EAAU;CAEV,EAAa;CACb,EAAe,AAA4B;CAC3C,EAAe,AAA6B;CAE5C,EAAW,FAAiB;CAC5B,AAAoB,AAAK;CAEzB,AAAoB;CAEpB,EAAU,FAAiB;CAC3B,AAAmB,AAAK;CACxB,AAAoB;CAEpB,EAAU,FAAiB;CAC3B,AAAmB,AAAK;CACxB,AAAoB;CAEpB,EAAU,FAAiB;CAC3B,AAAkB,AAAK;CAEvB,AAAoB;CACpB,AAAgB;CAEhB,EAAS;CACT,EAAW;CACX,EAAiB,FAAC;CAElB,EAAe,AAAa;CAEN,MAAO,AAAyB;CAC3C,aAAS,bAAmC;CACvD,AAAgB;CAEhB,AAAqC,AAAK;;+BAkCpC,pBACN;;;;UAhCD,KAAwC;EACvC,CAAW,FAAC;EACZ,AAAI,DAAC,AAAU,EAAiB,FAAC,KAC5B,HAAiB;;SAGvB,EAAmB;EAClB,DAAqC,AAAK;EAC1C,EAAU;EAEV,EAAgB;EAChB,EAAqB;EAErB,EAAoB;EACpB,EAAoB;EAEpB,CAAiB,AAAI,FAAS,EAAU;EACxC,CAAiB,AAAI,FAAS,EAAU;EAExC,EAAU;EAEV,DAAa,EAAK,FAAS,EAAU;EACrC,DAAa,EAAK,FAAS;EAC3B,DAAa,EAAK,FAAS,EAAU;EACrC,DAAa,EAAK,FAAS,EAAS,AAAK;EACzC,DAAa,EAAK,FAAS,EAAS;EACpC,DAAa,EAAK,FAAS,EAAS;EACpC,CAAiB;EACjB,DAAiB;;;;;AC0LjB,GAAW;AACX,GAAyB;AACzB,GAAyB;AAKzB,GAAgB,SACf;CAMA,AAAmB;;AAKpB,GAAa,UACZ;CAMA,AAAgB;;;;;"
}